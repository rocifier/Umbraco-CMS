using Microsoft.WindowsAzure.Storage.Table;
using System;
using System.Collections.Generic;
using Umbraco.Core.Configuration.UmbracoSettings;
using Umbraco.Core.Logging;
using Umbraco.Core.Models.EntityBase;
using Umbraco.Core.Persistence.NoSqlRepositories.Interfaces;

namespace Umbraco.Core.Persistence.NoSqlRepositories
{
    /// <summary>
    /// Stores the minumum possible information we might be interested in for recyclable entities
    /// </summary>
    internal class RecycleEntity
    {
        public int? RecycleState { get; set; }
        public string PartitionKey { get; set; }
        public string RowKey { get; set; }
    }

    /// <summary>
    /// This repository interacts directly with Azure tables since it is below the cache layer.
    /// </summary>
    /// <typeparam name="TId"></typeparam>
    /// <typeparam name="TEntity">Base Umbraco entity type which is being stored in this repository</typeparam>
    internal abstract class AzureRecycleBinRepository<TId, TEntity> : AzureTablesRepositoryBase<TId, TEntity>, IRecycleBinRepository<TEntity>
        where TEntity : class, IUmbracoEntity
    {
        protected AzureRecycleBinRepository(IAzureTablesUnitOfWork work, CacheHelper cache, ILogger logger, IContentSection contentSection)
            : base(work, cache, logger)
        {
        }

        protected abstract int RecycleBinId { get; }

        public virtual IEnumerable<TEntity> GetEntitiesInRecycleBin()
        {
            string filter = "";
            return Get(filter);
        }

        internal virtual IEnumerable<RecycleEntity> GetTableEntitiesInRecycleBin()
        {
            CloudTable table = UnitOfWork.Database.GetTableReference("umb_content");
            
            // Define the query, and select only the Email property.
            TableQuery<DynamicTableEntity> projectionQuery = new TableQuery<DynamicTableEntity>()
                .Where("recyclestate eq 1")
                .Select(new string[] { "recyclestate" });

            // Define an entity resolver to work with the entity after retrieval.
            EntityResolver <RecycleEntity> resolver = (pk, rk, ts, props, etag) => new RecycleEntity()
            {
                RecycleState = props["recyclestate"].Int32Value,
                PartitionKey = pk,
                RowKey = rk
            };

            return table.ExecuteQuery(projectionQuery, resolver, null, null);
        }

        /// <summary>
        /// Empties the Recycle Bin by running single bulk-Delete queries
        /// against the Content- or Media's Recycle Bin.
        /// </summary>
        /// <returns></returns>
        public virtual bool EmptyRecycleBin()
        {
            try
            {
                // For NoSql we must get the list of entities we want to delete first
                var entities = GetTableEntitiesInRecycleBin();
                CloudTable table = UnitOfWork.Database.GetTableReference("umb_content");
                var batchOperation = new TableBatchOperation();

                foreach (var entity in entities)
                {
                    var tableEntity = new DynamicTableEntity(entity.PartitionKey, entity.RowKey);
                    tableEntity.ETag = "*";
                    batchOperation.Delete(tableEntity);
                }

                table.ExecuteBatch(batchOperation);
                return true;

            }
            catch (Exception ex)
            {
                Logger.Error(this.GetType(), ex.Message, ex);
                return false;
            }
        }
        
        /// <summary>
        /// Gets a list of files, which are referenced on items in the Recycle Bin.
        /// The list is generated by the convention that a file is referenced by 
        /// the Upload data type or a property type with the alias 'umbracoFile'.
        /// </summary>
        /// <returns></returns>
        /// <remarks>
        /// This is purely for backwards compatibility
        /// </remarks>
        internal List<string> GetFilesInRecycleBinForUploadField()
        {
            throw new NotImplementedException();
        }
    }

}
